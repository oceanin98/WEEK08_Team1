Kernel command line: -q run priority-donate-nest
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  157,081,600 loops/s.
Boot complete.
Executing 'priority-donate-nest':
(priority-donate-nest) begin
(priority-donate-nest) Low thread should have priority 32.  Actual priority: 31.
(priority-donate-nest) Low thread should have priority 33.  Actual priority: 31.
(priority-donate-nest) Medium thread should have priority 33.  Actual priority: 32.
(priority-donate-nest) Medium thread got the lock.
(priority-donate-nest) Medium thread should just have finished.
(priority-donate-nest) Low thread should have priority 31.  Actual priority: 31.
(priority-donate-nest) end
Execution of 'priority-donate-nest' complete.
Timer: 30 ticks
Thread: 0 idle tickKernel PANIC at ../../threads/synch.c:223 in lock_release(): assertion `lock_held_by_current_thread (lock)' failed.
Call stack: 0x800421343f 0x8004209fa4 0x8004218484 0x80042071cd.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 31 ticks
Thread: 0 idle ticks, 31 kernel ticks, 0 user ticks
Console: 1